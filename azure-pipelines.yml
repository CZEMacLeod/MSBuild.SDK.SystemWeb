parameters:
  - name: timestamper
    type: string
    displayName: Time Stamper URL
    default: 'http://timestamp.acs.microsoft.com'
    values:
    - 'http://timestamp.acs.microsoft.com'
    - 'http://timestamp.sectigo.com'
    - 'http://timestamp.digicert.com'
    - 'http://aatl-timestamp.globalsign.com/tsa/aohfewat2389535fnasgnlg5m23'
    - 'http://timestamp.entrust.net/TSS/RFC3161sha2TS'
    - 'http://kstamp.keynectis.com/KSign/'
    - 'http://tsa.quovadisglobal.com/TSS/HttpTspServer'
    - 'http://kstamp.keynectis.com/KSign/'
    - 'http://tss.accv.es:8318/tsa'
    - 'http://tsa.izenpe.com'
    - 'http://timestamp.sectigo.com/qualified'
    - 'http://timestamp.comodoca.com'
  - name: packagesigninginterval
    type: number
    displayName: Package Signing Interval
    default: 1
  - name: git_commit_ids
    type: string
    displayName: Build Commit IDs
    default: ' '
  - name: project_to_build
    type: string
    displayName: Project(s) to Build
    default: ' '
  - name: build_sdk
    type: boolean
    displayName: Force build MSBuild.SDK.SystemWeb
    default: false
  - name: build_razor_sdk
    type: boolean
    displayName: Force build MSBuild.SDK.SystemWeb.RazorLibrary
    default: false
  - name: build_templates
    type: boolean
    displayName: Force build MSBuild.SDK.SystemWeb.Templates
    default: false

trigger:
  batch: true
  branches:
    include:
    - main
  paths:
    exclude:
    - docs/*

pr: none

pool:
  vmImage: windows-latest

variables:
- group: Github-Packages
- group: 'c3d-devops'
- name: solution
  value: 'MSBuild.SDK.SystemWeb.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name: buildMachine
  value: '$(Agent.MachineName)'
- name: buildUser
  value: '$(Build.QueuedBy)'
- name: 'timestamper'
  value: ${{ parameters.timestamper }}
- ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/') }}:
  - name: 'branchName'
    value: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
- ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
  - name: 'branchName'
    value: $[ replace(variables['System.PullRequest.TargetBranch'], 'refs/heads/', '') ]
  
steps:
- checkout: self
  clean: true
  submodules: true
  persistCredentials: true
  fetchDepth: 0
  fetchTags: true

- powershell: 'Write-Host ("##vso[task.setvariable variable=MSBuildEmitSolution;]0")'
  displayName: 'Ensure MSBuildEmitSolution is not set'

- task: DownloadSecureFile@1
  displayName: 'Download secure file SNK'
  name: snk
  inputs:
    secureFile: '61ad38e7-05ff-4421-aea8-e3241b75c7a1'
    
- task: NuGetToolInstaller@1
  displayName: 'Use NuGet >=6.6.1'
  inputs:
    versionSpec: '>=6.6.1'
    checkLatest: true

# Install the code signing tool
- task: DotNetCoreCLI@2
  inputs:
    command: custom
    custom: tool
    arguments: update sign --global --version 0.9.1-beta.23530.1
  displayName: Install SignTool tool

- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '$(solution)'
    feedsToUse: 'config'
    includeNugetOrg: 'true'
    externalFeedCredentials: 'github-czemacleod-packages'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    clean: true
    msbuildArgs: '/p:PackageOutputPath="$(Build.ArtifactStagingDirectory)" /p:BuildUser="$(buildUser)" /p:BuildMachine="$(buildMachine)" /p:AssemblyOriginatorKeyFile="$(snk.secureFilePath)"'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'

- task: PowerShell@2
  displayName: 'Detect packages'
  inputs:
    targetType: filePath
    filePath: 'build/DetectPackages.ps1'
  env:
    branchName: $(variables['branchName'])
     
# Run the signing command
- task: PowerShell@2
  displayName: Sign packages
  condition: and(succeeded(), ne(variables['package_count'],0))
  inputs:
    targetType: inline
    script: |
      sign code azure-key-vault `
      "**/*.nupkg" `
      --base-directory "$(Build.ArtifactStagingDirectory)" `
      -d "Cynthia Z E MacLeod" `
      -u "https://github.com/CZEMacLeod" `
      -kvu "https://c3d-devops.vault.azure.net/" `
      -kvc "c3d-codesign" `
      -v information `
      -t "$(timestamper)" `
      --azure-key-vault-tenant-id "$(SignTenantId)" `
      --azure-key-vault-client-id "$(SignClientId)" `
      --azure-key-vault-client-secret '$(SignClientSecret)'

- task: CopyFiles@2
  condition: and(succeeded(), ne(variables['package_count'],0))
  displayName: Create nuget publish config
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)\build'
    contents: 'nuget.publish.config'
    targetFolder: $(Build.ArtifactStagingDirectory)

- task: PowerShell@2
  condition: and(succeeded(), ne(variables['package_count'],0))
  displayName: Build Nuget Source URL
  inputs:
    targetType: 'inline'
    script: |
      $owner = "$env:GITHUB_OWNER"
      $source = "https://nuget.pkg.github.com/" + $owner.ToLower() + "/index.json"
      Write-Host ("Nuget Source URL = $source")
      Write-Host ("##vso[task.setvariable variable=NUGET_SOURCE]$source")
  env:
    GITHUB_OWNER: $(GITHUB_OWNER)

- script: nuget.exe sources Add -NonInteractive -Name GitHub -Source "%NUGET_SOURCE%" -Username "%GITHUB_USERNAME%" -Password "%GITHUB_TOKEN%" -ConfigFile %NUGET_CONFIG%
  condition: and(succeeded(), ne(variables['package_count'],0))
  displayName: Add github package source
  env:
    GITHUB_OWNER: $(GITHUB_OWNER)
    GITHUB_USERNAME: $(GITHUB_USERNAME)
    GITHUB_TOKEN: $(GITHUB_TOKEN)
    NUGET_SOURCE: $(NUGET_SOURCE)
    NUGET_CONFIG: $(Build.ArtifactStagingDirectory)\nuget.publish.config

- script: nuget push -Source GitHub -ConfigFile %NUGET_CONFIG% -SkipDuplicate "%PACKAGES_DIR%\*.nupkg"
  displayName: Push Nuget Packages to $(GITHUB_PACKAGES)
  condition: and(succeeded(), ne(variables['package_count'],0))
  env:
    PACKAGES_DIR: $(Build.ArtifactStagingDirectory)
    NUGET_CONFIG: $(Build.ArtifactStagingDirectory)\nuget.publish.config

- script: nuget.exe sources Add -NonInteractive -Name NuGet -Source "https://api.nuget.org/v3/index.json" -ConfigFile %NUGET_CONFIG%
  condition: and(succeeded(), ne(variables['package_count'],0))
  displayName: Add nuget.org package source
  env:
    NUGET_CONFIG: $(Build.ArtifactStagingDirectory)\nuget.publish.config

- script: nuget.exe setapikey %NUGET_API_KEY% -Source "https://api.nuget.org/v3/index.json" -ConfigFile %NUGET_CONFIG%
  condition: and(succeeded(), ne(variables['package_count'],0))
  displayName: Set nuget.org apikey
  env:
    NUGET_API_KEY: $(NUGET_API_KEY)
    NUGET_CONFIG: $(Build.ArtifactStagingDirectory)\nuget.publish.config

- script: nuget push -Source NuGet -ConfigFile %NUGET_CONFIG% -SkipDuplicate "%PACKAGES_DIR%\*.nupkg"
  displayName: Push Nuget Packages to nuget.org
  condition: and(succeeded(), ne(variables['package_count'],0))
  env:
    PACKAGES_DIR: $(Build.ArtifactStagingDirectory)
    NUGET_CONFIG: $(Build.ArtifactStagingDirectory)\nuget.publish.config

- powershell: |
    Write-Host "Tagging Build: $env:BuildNumber"
    $tag = "v" + $env:BuildNumber
    git tag $tag
    git push origin $tag
  displayName: Tag build
  env:
    BuildNumber: $(Build.BuildNumber)
  condition: and(succeeded(), eq(variables['branchName'], 'main'))

- task: GithubRelease@1
  displayName: 'Create GitHub Release'
  condition: and(succeeded(), eq(variables['push_packages'], 'True'))
  inputs:
    gitHubConnection: github-czemacleod
    repositoryName: CZEMacLeod/MSBuild.SDK.SystemWeb
    assets: $(Build.ArtifactStagingDirectory)/*.nupkg
    tagSource: userSpecifiedTag
    tag: v$(Build.BuildNumber)
    addChangeLog: true
    releaseNotesSource: filePath
    releaseNotesFilePath: $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
